using System;
using System.Collections.Generic;

namespace Skyware.Arenal.Model;


/// <summary>
/// Medical order for laboratory examination/observation or service.
/// </summary>
public class Order : EntityBase
{

    /// <summary>
    /// Identifies Arenal workflow.
    /// </summary>
    public string Workflow { get; set; }

    /// <summary>
    /// ArenalId of the ordering party. Set by Arenal.
    /// </summary>
    public string PlacerId { get; set; }

    /// <summary>
    /// ArenalId of the service provider to which this order is intended (conditional).
    /// In 'open' workflows, the identifier is generated by the party which takes the order.
    /// </summary>
    public string ProviderId { get; set; }

    /// <summary>
    /// Placer's order identifier (optional). This is the identifier generated by the party which places the order.
    /// </summary>
    public string PlacerOrderId { get; set; }

    /// <summary>
    /// Filler's order identifier (optional). This is the identifier generated by the party which consumes the order.
    /// </summary>
    public string ProviderOrderId { get; set; }

    /// <summary>
    /// Date and time the order was created.
    /// </summary>
    public DateTime Created { get; set; } = DateTime.Now;

    /// <summary>
    /// Date and time the order was last modified.
    /// </summary>
    public DateTime? Modified { get; set; }

    /// <summary>
    /// Version (server generated), starts from 0 and increments on every update from the publisher side.
    /// </summary>
    public int Version { get; set; } = 0;

    /// <summary>
    /// Date and time when the order is taken or rejected by the provider.
    /// </summary>
    public DateTime? TakenOrRejected { get; set; }

    /// <summary>
    /// Reason for rejecting of the order<see cref="OrderStatuses.REJECTED"/>
    /// </summary>
    public Identifier RejectReason { get; set; }

    /// <summary>
    /// Order status, according to <see cref="OrderStatuses"/>.
    /// </summary>
    public string Status { get; set; } = OrderStatuses.AVAILABLE;

    /// <summary>
    /// Notes from the placer.
    /// </summary>
    public Note PlacerNote { get; set; }

    /// <summary>
    /// Notes from the provider.
    /// </summary>
    public Note ProviderNote { get; set; }

    /// <summary>
    /// Ordering doctor.
    /// </summary>
    public Doctor Doctor { get; set; }

    /// <summary>
    /// Patient.
    /// </summary>
    public Patient Patient { get; set; }

    /// <summary>
    /// Additional orders or referrals, which are part of his order and ares stored and processed in external systems.
    /// </summary>
    public IEnumerable<LinkedReferral> LinkedReferrals { get; set; }

    /// <summary>
    /// Array of requested examinations or observations.
    /// </summary>
    public IEnumerable<Service> Services { get; set; }

    /// <summary>
    /// Array of provided samples (conditional).
    /// </summary>
    public IEnumerable<Sample> Samples { get; set; }

    /// <summary>
    /// Order related files.
    /// </summary>
    public IEnumerable<Attachment> Attachments { get; set; }

    /// <summary>
    /// Default constructor.
    /// </summary>
    public Order() : base() { }

    /// <summary>
    /// Instantiates minimal valid order.
    /// </summary>
    /// <param name="workflow"></param>
    /// <param name="patient"></param>
    /// <param name="services"></param>
    /// <param name="samples"></param>
    /// <param name="providerId"></param>
    public Order(string workflow, Patient patient, IEnumerable<Service> services, IEnumerable<Sample> samples = null, string providerId = null) : this()
    {
        Workflow = workflow;
        Patient = patient;
        Services = services;
        Samples = samples;
        ProviderId = providerId;
    }

}

