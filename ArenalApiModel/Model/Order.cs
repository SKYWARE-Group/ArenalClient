using FluentValidation.Results;
using Skyware.Arenal.Model.Actions;
using Skyware.Arenal.Validation;
using System;
using System.Collections.Generic;

namespace Skyware.Arenal.Model;


/// <summary>
/// Medical order for laboratory examination/observation or service.
/// </summary>
public class Order : EntityBase
{

    private static readonly OrderValidator _validator = new OrderValidator();

    /// <summary>
    /// Identifies Arenal workflow.
    /// </summary>
    public string Workflow { get; set; }

    /// <summary>
    /// ArenalId of the ordering party. Set by Arenal.
    /// </summary>
    public string PlacerId { get; set; }

    /// <summary>
    /// ArenalId of the service provider to which this order is intended (conditional).
    /// In 'open' workflows, the identifier is generated by the party which takes the order.
    /// </summary>
    public string ProviderId { get; set; }

    /// <summary>
    /// Placer's order identifier (optional). This is the identifier generated by the party which places the order.
    /// </summary>
    public string PlacerOrderId { get; set; }

    /// <summary>
    /// Filler's order identifier (optional). This is the identifier generated by the party which consumes the order.
    /// </summary>
    public string ProviderOrderId { get; set; }

    /// <summary>
    /// Date and time the order was created.
    /// </summary>
    public DateTime Created { get; set; } = DateTime.Now;

    /// <summary>
    /// Date and time the order was last modified.
    /// </summary>
    public DateTime? Modified { get; set; }

    /// <summary>
    /// Version (server generated), starts from 0 and increments on every update from the publisher side.
    /// </summary>
    public int Version { get; set; } = 0;

    /// <summary>
    /// Date and time when the order is taken or rejected by the provider.
    /// </summary>
    public DateTime? TakenOrRejected { get; set; }

    /// <summary>
    /// Order status, according to <see cref="OrderStatuses"/>.
    /// </summary>
    public string Status { get; set; } = OrderStatuses.AVAILABLE;

    /// <summary>
    /// Notes from the placer.
    /// </summary>
    public Note PlacerNote { get; set; }

    /// <summary>
    /// Notes from the provider.
    /// </summary>
    public Note ProviderNote { get; set; }

    /// <summary>
    /// Ordering doctor.
    /// </summary>
    public Doctor Doctor { get; set; }

    /// <summary>
    /// Patient.
    /// </summary>
    public Patient Patient { get; set; }

    /// <summary>
    /// Additional orders or referrals, which are part of his order and ares stored and processed in external systems.
    /// </summary>
    public IList<LinkedReferral> LinkedReferrals { get; set; }

    /// <summary>
    /// Array of requested examinations or observations.
    /// </summary>
    public IList<Service> Services { get; set; }

    /// <summary>
    /// Array of provided samples (conditional).
    /// </summary>
    public IList<Sample> Samples { get; set; }

    /// <summary>
    /// Order related files.
    /// </summary>
    public IList<Attachment> Attachments { get; set; }

    /// <summary>
    /// Default constructor.
    /// </summary>
    public Order() : base() { }

    /// <summary>
    /// Instantiates minimal valid order.
    /// </summary>
    /// <param name="workflow"></param>
    /// <param name="patient"></param>
    /// <param name="services"></param>
    /// <param name="samples"></param>
    /// <param name="providerId"></param>
    public Order(string workflow, Patient patient, IList<Service> services = null , IList<Sample> samples = null, string providerId = null) : this()
    {
        Workflow = workflow;
        Patient = patient;
        if (services is not null) Services = services;
        if (samples is not null) Samples = samples;
        if (!string.IsNullOrWhiteSpace(providerId)) ProviderId = providerId;
    }

    public Order SetPatient(Patient patient)
    {
        Patient = patient;
        return this;
    }

    /// <summary>
    /// Safely adds a <see cref="Sample"/> to the order.
    /// </summary>
    /// <param name="sample">A <see cref="Sample"/> to add</param>
    public Order AddSample(Sample sample)
    {
        Samples ??= new List<Sample>();
        Samples.Add(sample);
        return this;
    }

    /// <summary>
    /// Safely adds a <see cref="Sample"/> to the order.
    /// </summary>
    /// <param name="sampleTypeCode"></param>
    /// <param name="barcode"></param>
    /// <param name="taken"></param>
    /// <param name="note"></param>
    /// <param name="additiveCode"></param>
    public Order AddSample(string sampleTypeCode, string additiveCode, string barcode, DateTime? taken = null, string note = null)
    {
        Samples ??= new List<Sample>();
        Samples.Add(new Sample(sampleTypeCode, additiveCode, barcode, taken, note));
        return this;
    }

    /// <summary>
    /// Safely adds a <see cref="Service"/> to the order.
    /// </summary>
    /// <param name="service">A <see cref="Service"/> to add</param>
    public Order AddService(Service service)
    {
        Services ??= new List<Service>();
        Services.Add(service);
        return this;
    }

    /// <summary>
    /// Safely adds a <see cref="Service"/> to the order.
    /// </summary>
    /// <param name="serviceCode">LOINC code for service to add</param>
    /// <param name="name">Name of the service to add</param>
    /// <param name="note">A note to the service</param>
    public Order AddService(string serviceCode, string name = null, string note = null)
    {
        Services ??= new List<Service>();
        Services.Add(new Service(serviceCode, name, note));
        return this;
    }

    /// <summary>
    /// Validates the order against business logic.
    /// </summary>
    /// <returns></returns>
    public ValidationResult Validate()
    {
        return _validator.Validate(this);
    }

}

